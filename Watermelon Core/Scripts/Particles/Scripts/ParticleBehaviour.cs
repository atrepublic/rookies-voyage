// ============================================================
// ParticleBehaviour.cs
// ------------------------------------------------------------
// 🔹 스크립트 용도
//   파티클 프리팹(ParticleSystem)에 부가적인 동작이 필요할 때
//   상속받아 구현하는 추상 베이스 클래스입니다.
//   └ 예) 파티클 재생과 동시에 추가 애니메이션 실행,
//         비활성화 시 리소스 초기화 등
//   Unity 2023 이상 권장 문법을 준수하며, 모든 파생 클래스는
//   반드시 아래 두 메서드를 구현해야 합니다.
// ============================================================

using UnityEngine;

namespace Watermelon
{
    /// <summary>
    /// 파티클의 특수 동작을 정의하기 위한 추상 베이스 클래스입니다.
    /// 파티클 프리팹에 이 스크립트를 상속한 컴포넌트를 붙이면
    /// <see cref="ParticlesController"/> 내부 로직에서 자동으로 탐지되어
    /// 재생/비활성화 시점에 맞추어 콜백을 받을 수 있습니다.
    /// </summary>
    public abstract class ParticleBehaviour : MonoBehaviour
    {
        #region Life‑Cycle
        // -----------------------------------------------------
        // 🔸 OnParticleActivated()
        //   파티클 시스템이 활성화(Play)될 때 호출됩니다.
        //   ▷ 실제 재생 직전에 트리거되어 추가 효과를 연동하거나
        //     초기화 로직을 실행하기에 적합합니다.
        // -----------------------------------------------------
        #endregion
        /// <summary>
        /// 파티클이 활성화될 때 호출됩니다.
        /// 예) 추가 애니메이션 재생, 사운드 트리거 등
        /// </summary>
        public abstract void OnParticleActivated();

        #region Life‑Cycle
        // -----------------------------------------------------
        // 🔸 OnParticleDisabled()
        //   파티클 시스템이 비활성화(Stop & SetActive(false))될 때
        //   호출됩니다. 리소스 반환이나 상태 초기화를 수행하세요.
        // -----------------------------------------------------
        #endregion
        /// <summary>
        /// 파티클이 비활성화될 때 호출됩니다.
        /// 예) 변수 초기화, 풀링 시스템으로 복귀 처리 등
        /// </summary>
        public abstract void OnParticleDisabled();
    }
}
